@*Necessário para trabalhar com javascript*@
@inject IJSRuntime jsRuntime;

<h2 class="mb-5 mt-3">@Titulo</h2>

<main>
    <section>
        <h4>Nova tarefa</h4>
        <input type="text" class="form-control" @bind="@_novaTarefa" spellcheck="true" placeholder="Nome da tarefa" />
        <br />
        <button class="btn btn-primary" @onclick="AdicionarTarefa">Adicionar</button>
    </section>

    <section>
        <table class="table table-striped">
            <thead>
                <tr>
                    <td>Descrição</td>
                    <td>Data de criação</td>
                    <td>Concluído</td>
                    <td>Opções</td>
                </tr>
            </thead>
            <tbody>
                @*Usa o componente ListaGenerica para iterar sobre a lista informada*@
                <ListaGenerica ListaItem="Tarefas">
                    <Lista Context="tarefa">
                        @*<TarefaDetalhe Tarefa="tarefa" RemoverTarefaCallBack="RemoverTarefa" />*@
                        <TarefaDetalhe Tarefa="tarefa" RemoverTarefaCallBack="RemoverTarefaComModal" />
                    </Lista>
                </ListaGenerica>
            </tbody>
        </table>

    </section>
</main>

<Modal @ref="ConfirmacaoModal" OnConfirmar="ConfirmarRemocaoComModal">
    <div>Deseja excluir esta tarefa "@tarefaComModal.Descricao"?</div>
</Modal>


@code {
    [Parameter] public string Titulo { get; set; }
    [Parameter] public List<TarefaModelo> Tarefas { get; set; }
    private string _novaTarefa = "";

    private async Task AdicionarTarefa()
    {
        if (!string.IsNullOrWhiteSpace(_novaTarefa))
        {
            Tarefas.Add(new TarefaModelo
            {
                ID = Guid.NewGuid(),
                Descricao = _novaTarefa,
                DataCriacao = DateTime.Now
            });
            _novaTarefa = "";
            _totalDeTarefas = Tarefas.Count();

            await jsRuntime.InvokeVoidAsync("RecuperarTotalDeTarefas");
            //Nome do método e argumentos
            await jsRuntime.InvokeVoidAsync("RecuperarTotalConcluido", DotNetObjectReference.Create(this));
        }
    }

    private static int _totalDeTarefas;

    //Anotação para habilitar invocação com JavaScript
    [JSInvokable]
    public static Task<int> ObterTotalDeTarefas()
    {
        return Task.FromResult(_totalDeTarefas);
    }

    // Método de instância, invocado com javascript
    [JSInvokable]
    public Task<int> ObterTotalDeTarefasConcluidas()
    {
        return Task.FromResult(Tarefas.Count(t => t.Concluido));
    }

    private async Task RemoverTarefa(TarefaModelo tarefa)
    {
        //Invocação do método confirm do javascript
        var result = await jsRuntime.InvokeAsync<bool>("confirm", $"Deseja remover a tarefa \"{tarefa?.Descricao}\" ?");

        if (result)
        {
            if (tarefa == null) return;
            Tarefas.Remove(tarefa);
            //Usando método padrão
            //await jsRuntime.InvokeVoidAsync("alert", "Tarefa excluida com sucesso");
            // Usando método personalizado
            await jsRuntime.InvokeVoidAsync("MostrarAlerta", "Tarefa excluida com sucesso. [Método personalizado]");
        }
    }

    //Referência ao componente modal que foi declarado no HTML
    private Modal ConfirmacaoModal;
    private TarefaModelo tarefaComModal;
    private void RemoverTarefaComModal(TarefaModelo tarefa)
    {
        ConfirmacaoModal.AlterarVisibilidadeModal();
        tarefaComModal = tarefa;
    }

    private void ConfirmarRemocaoComModal()
    {
        Tarefas.Remove(tarefaComModal);
        ConfirmacaoModal.AlterarVisibilidadeModal();
    }
}

<style>
    main {
        display: flex;
    }

        main section:nth-child(1) {
            flex: 1;
            margin-right: 30px;
        }

        main section:nth-child(2) {
            flex: 2;
        }

    section input {
        max-width: 300px;
    }
</style>